#!/bin/bash
# This script creates the files for a new CPP class, from project root foler.

# TODO:
#	- Add colors for errors
#	- Might be a good idea to add << overload operator. Maybe as an option ?

if [ "$#" -eq 0 ]
then
	echo "Usage: ./createClass <name of the class> <name of general header> (optional)"
	exit 1;
fi

# Checking that the script is launched from a ex0* folder
if [ ! -d "src" ] || [ ! -d "include" ]
then
	echo "missing \"src\" or \"include\" directories. Are you sure you're in the right place ?"
	exit 1;
fi

# Checking that the requires class does not already exist
if [ -f "include/$1.hpp" ]
then
	echo "Error: there is already a class by that name"
	exit 1;
fi

# Checking that a general header is not already present
if [ "$#" -eq 2 ]
then
	if [ -f "include/$2.h" ]
	then
		echo "Error: you're going to overwrite the existing general header."
		exit 1;
	fi
fi

# this is not necessary, actually an exercice from CPP Piscine Day 06 ex 01 asks for a one-letter class
# checking that the class name is not just one letter
#variableLen=`printf $1 | wc -c`
#if [ $variableLen -eq 1 ]
	#then
		#echo "Error: your class name is too short"
		#exit 1;
#fi

# checking that the class name starts with an uppercase
firstLetter=$(echo ${1} | cut -b 1)
if [[ ! "$firstLetter" =~ ^[A-Z] ]]
then
	echo "Error: your class name should start with an uppercase."
	exit 1;
fi

# cleaning up the files first
rm -f src/"$1".cpp
rm -f include/"$1".hpp

vim -c ":Stdheader" -c ":$" -c ":d" -c ":wq" src/"$1".cpp
vim -c ":Stdheader" -c ":$" -c ":d" -c ":wq" include/"$1".hpp
if [ "$#" -eq 2 ] # if there is a third argument, create a general header with the name of that argument
then
	rm -f include/$2.h
	headerProtec=`echo $2 | tr '[:lower:]' '[:upper:]'`
	vim -c ":Stdheader" -c ":$" -c ":d" -c ":wq" include/"$2".h
	>> include/"$2".h printf "#ifndef ${headerProtec}_H
# define ${headerProtec}_H

# include <iostream>

#endif
"
fi

## CREATING CLASS HPP FILE ##

headerProtec=`echo $1 | tr '[:lower:]' '[:upper:]'`

# Adding content to header file
>> include/"$1".hpp printf "#ifndef ${headerProtec}_HPP
# define ${headerProtec}_HPP
"

if [ "$#" -eq 2 ] # if there is a general header, include it in class header
then
	>>include/"$1".hpp printf "
# include \"${2}.h\"
	"
fi

>> include/"$1".hpp printf "
class $1
{
	public:
		$1();
		$1(const $1 &copyMe);
		~$1();
		$1&		operator = (const $1 &copyMe);
	
	protected:
		// add protected elements here

	private:
		// add private elements here
};

#endif
"

# Populating CPP file
>> src/"$1".cpp printf "#include \"$1.hpp\"

/* CONSTRUCTORS ***************************************************************/

$1::$1()
{
	// std::cout << \"Default constructor called\" << std::endl;
}

$1::$1(const $1 &copyMe)
{
	// std::cout << \"Copy constructor called\" << std::endl;
	*this = copyMe;
}

/* DESTRUCTORS ****************************************************************/

$1::~$1()
{
	// std::cout << \"Destructor called\" << std::endl;
}

/* OVERLOADS ******************************************************************/

$1& $1::operator = (const $1 &copyMe)
{
	// std::cout << \"Copy assignment operator called\" << std::endl;
	return *this;
}

/* METHODS ********************************************************************/



"

printf "\n> Successfully created class [$1] !\n\n"
